/*
 * Generated by dtrace(1M).
 */

#ifndef	_PROVIDER_H
#define	_PROVIDER_H

#if !defined(DTRACE_PROBES_DISABLED) || !DTRACE_PROBES_DISABLED
#include <unistd.h>

#endif /* !defined(DTRACE_PROBES_DISABLED) || !DTRACE_PROBES_DISABLED */

#ifdef	__cplusplus
extern "C" {
#endif

#define TRACING_STABILITY "___dtrace_stability$tracing$v1$1_1_0_1_1_0_1_1_0_1_1_0_1_1_0"

#define TRACING_TYPEDEFS "___dtrace_typedefs$tracing$v2"

#if !defined(DTRACE_PROBES_DISABLED) || !DTRACE_PROBES_DISABLED

#define	TRACING_DEBUG(arg0, arg1, arg2) \
do { \
	__asm__ volatile(".reference " TRACING_TYPEDEFS); \
	__dtrace_probe$tracing$debug$v1$63686172202a$63686172202a$63686172202a(arg0, arg1, arg2); \
	__asm__ volatile(".reference " TRACING_STABILITY); \
} while (0)
#define	TRACING_DEBUG_ENABLED() \
	({ int _r = __dtrace_isenabled$tracing$debug$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	TRACING_ENTER(arg0, arg1) \
do { \
	__asm__ volatile(".reference " TRACING_TYPEDEFS); \
	__dtrace_probe$tracing$enter$v1$63686172202a$63686172202a(arg0, arg1); \
	__asm__ volatile(".reference " TRACING_STABILITY); \
} while (0)
#define	TRACING_ENTER_ENABLED() \
	({ int _r = __dtrace_isenabled$tracing$enter$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	TRACING_ERROR(arg0, arg1, arg2) \
do { \
	__asm__ volatile(".reference " TRACING_TYPEDEFS); \
	__dtrace_probe$tracing$error$v1$63686172202a$63686172202a$63686172202a(arg0, arg1, arg2); \
	__asm__ volatile(".reference " TRACING_STABILITY); \
} while (0)
#define	TRACING_ERROR_ENABLED() \
	({ int _r = __dtrace_isenabled$tracing$error$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	TRACING_EVENT(arg0, arg1, arg2) \
do { \
	__asm__ volatile(".reference " TRACING_TYPEDEFS); \
	__dtrace_probe$tracing$event$v1$63686172202a$63686172202a$63686172202a(arg0, arg1, arg2); \
	__asm__ volatile(".reference " TRACING_STABILITY); \
} while (0)
#define	TRACING_EVENT_ENABLED() \
	({ int _r = __dtrace_isenabled$tracing$event$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	TRACING_EXIT(arg0, arg1) \
do { \
	__asm__ volatile(".reference " TRACING_TYPEDEFS); \
	__dtrace_probe$tracing$exit$v1$63686172202a$63686172202a(arg0, arg1); \
	__asm__ volatile(".reference " TRACING_STABILITY); \
} while (0)
#define	TRACING_EXIT_ENABLED() \
	({ int _r = __dtrace_isenabled$tracing$exit$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	TRACING_INFO(arg0, arg1, arg2) \
do { \
	__asm__ volatile(".reference " TRACING_TYPEDEFS); \
	__dtrace_probe$tracing$info$v1$63686172202a$63686172202a$63686172202a(arg0, arg1, arg2); \
	__asm__ volatile(".reference " TRACING_STABILITY); \
} while (0)
#define	TRACING_INFO_ENABLED() \
	({ int _r = __dtrace_isenabled$tracing$info$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	TRACING_TRACE(arg0, arg1, arg2) \
do { \
	__asm__ volatile(".reference " TRACING_TYPEDEFS); \
	__dtrace_probe$tracing$trace$v1$63686172202a$63686172202a$63686172202a(arg0, arg1, arg2); \
	__asm__ volatile(".reference " TRACING_STABILITY); \
} while (0)
#define	TRACING_TRACE_ENABLED() \
	({ int _r = __dtrace_isenabled$tracing$trace$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	TRACING_WARN(arg0, arg1, arg2) \
do { \
	__asm__ volatile(".reference " TRACING_TYPEDEFS); \
	__dtrace_probe$tracing$warn$v1$63686172202a$63686172202a$63686172202a(arg0, arg1, arg2); \
	__asm__ volatile(".reference " TRACING_STABILITY); \
} while (0)
#define	TRACING_WARN_ENABLED() \
	({ int _r = __dtrace_isenabled$tracing$warn$v1(); \
		__asm__ volatile(""); \
		_r; })


extern void __dtrace_probe$tracing$debug$v1$63686172202a$63686172202a$63686172202a(const char *, const char *, const char *);
extern int __dtrace_isenabled$tracing$debug$v1(void);
extern void __dtrace_probe$tracing$enter$v1$63686172202a$63686172202a(const char *, const char *);
extern int __dtrace_isenabled$tracing$enter$v1(void);
extern void __dtrace_probe$tracing$error$v1$63686172202a$63686172202a$63686172202a(const char *, const char *, const char *);
extern int __dtrace_isenabled$tracing$error$v1(void);
extern void __dtrace_probe$tracing$event$v1$63686172202a$63686172202a$63686172202a(const char *, const char *, const char *);
extern int __dtrace_isenabled$tracing$event$v1(void);
extern void __dtrace_probe$tracing$exit$v1$63686172202a$63686172202a(const char *, const char *);
extern int __dtrace_isenabled$tracing$exit$v1(void);
extern void __dtrace_probe$tracing$info$v1$63686172202a$63686172202a$63686172202a(const char *, const char *, const char *);
extern int __dtrace_isenabled$tracing$info$v1(void);
extern void __dtrace_probe$tracing$trace$v1$63686172202a$63686172202a$63686172202a(const char *, const char *, const char *);
extern int __dtrace_isenabled$tracing$trace$v1(void);
extern void __dtrace_probe$tracing$warn$v1$63686172202a$63686172202a$63686172202a(const char *, const char *, const char *);
extern int __dtrace_isenabled$tracing$warn$v1(void);

#else

#define	TRACING_DEBUG(arg0, arg1, arg2) \
do { \
	} while (0)
#define	TRACING_DEBUG_ENABLED() (0)
#define	TRACING_ENTER(arg0, arg1) \
do { \
	} while (0)
#define	TRACING_ENTER_ENABLED() (0)
#define	TRACING_ERROR(arg0, arg1, arg2) \
do { \
	} while (0)
#define	TRACING_ERROR_ENABLED() (0)
#define	TRACING_EVENT(arg0, arg1, arg2) \
do { \
	} while (0)
#define	TRACING_EVENT_ENABLED() (0)
#define	TRACING_EXIT(arg0, arg1) \
do { \
	} while (0)
#define	TRACING_EXIT_ENABLED() (0)
#define	TRACING_INFO(arg0, arg1, arg2) \
do { \
	} while (0)
#define	TRACING_INFO_ENABLED() (0)
#define	TRACING_TRACE(arg0, arg1, arg2) \
do { \
	} while (0)
#define	TRACING_TRACE_ENABLED() (0)
#define	TRACING_WARN(arg0, arg1, arg2) \
do { \
	} while (0)
#define	TRACING_WARN_ENABLED() (0)

#endif /* !defined(DTRACE_PROBES_DISABLED) || !DTRACE_PROBES_DISABLED */


#ifdef	__cplusplus
}
#endif

#endif	/* _PROVIDER_H */
